using BinaryProvider
# This is where all binaries will get installed
const prefix = Prefix(!isempty(ARGS) ? ARGS[1] : joinpath(@__DIR__,"usr"))
# Instantiate products here.  Examples:
libstemmer = LibraryProduct(prefix, "libstemmer")
# foo_executable = ExecutableProduct(prefix, "fooifier")
# libfoo_pc = FileProduct(joinpath(libdir(prefix), "pkgconfig", "libfoo.pc"))
# Assign products to `products`:
products = [libstemmer]
# Download binaries from hosted location
bin_prefix = "https://github.com/aviks/SnowballBuilder/releases/download/v.0.0.2"
# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc) => ("$bin_prefix/LibStemmer.aarch64-linux-gnu.tar.gz", "0c621065eecb376b03767d104bc4502141c11588eec7c08e447b33e1e818653e"),
    BinaryProvider.Linux(:armv7l, :glibc) => ("$bin_prefix/LibStemmer.arm-linux-gnueabihf.tar.gz", "ef23032a0c7002c492dff73c27871cb6078cf75d50f6bcc059b3424680e2e0d6"),
    BinaryProvider.Linux(:i686, :glibc) => ("$bin_prefix/LibStemmer.i686-linux-gnu.tar.gz", "d7180b99c1cb1250586d24a93b4d2d5c498fd77477cf20137b24a9d8485cc5cd"),
    BinaryProvider.Windows(:i686) => ("$bin_prefix/LibStemmer.i686-w64-mingw32.tar.gz", "dbb0823176d88296e848e037b83327c16df5d9623213de53e8ead2b510fa7f08"),
    BinaryProvider.Linux(:powerpc64le, :glibc) => ("$bin_prefix/LibStemmer.powerpc64le-linux-gnu.tar.gz", "aa9ec7b1ba87e6b887620b26103cf122d834b6607693688f2b9efe97a0dfe140"),
    BinaryProvider.MacOS() => ("$bin_prefix/LibStemmer.x86_64-apple-darwin14.tar.gz", "7f0c7f6e74367fd7d439c23552e0767bf4ccd4a26b127c63a7d6f625127042c2"),
    BinaryProvider.Linux(:x86_64, :glibc) => ("$bin_prefix/LibStemmer.x86_64-linux-gnu.tar.gz", "eadd33925c801f3b029128bd46f78557824f010b0127f3694cafff7d5a0df6a8"),
    BinaryProvider.Windows(:x86_64) => ("$bin_prefix/LibStemmer.x86_64-w64-mingw32.tar.gz", "043e659712aee60559e6af163e09dcd390659eb2c96798357c6735b33336afa9"),
)
if platform_key() in keys(download_info)
    # First, check to see if we're all satisfied
    if any(!satisfied(p; verbose=true) for p in products)
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=true)
    end
    # Finally, write out a deps.jl file that will contain mappings for each
    # named product here: (there will be a "libfoo" variable and a "fooifier"
    # variable, etc...)
    @write_deps_file libstemmer
else
    error("Your platform $(Sys.MACHINE) is not supported by this package!")
end